/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.openelements.maven.initializer.backend.service;

import com.openelements.maven.initializer.backend.dto.ProjectRequestDTO;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class ProjectStructureService {

  private static final Logger logger = LoggerFactory.getLogger(ProjectStructureService.class);

  public void createStructure(Path projectRoot, ProjectRequestDTO req) throws IOException {
    createDirectories(projectRoot, req.getGroupId(), req.getArtifactId());
    createGitignoreFile(projectRoot);
    createMainClass(projectRoot, req);
    updatePomFile(projectRoot, req);
  }

  private void createDirectories(Path root, String groupId, String artifactId) throws IOException {
    String packagePath = groupId.replace(".", "/");
    Path javaDir = root.resolve("src/main/java/" + packagePath + "/" + artifactId.toLowerCase());
    Files.createDirectories(javaDir);
  }

  private void createGitignoreFile(Path root) throws IOException {
    String content =
        """
                        target/
                        pom.xml.tag
                        pom.xml.releaseBackup
                        pom.xml.versionsBackup
                        pom.xml.next
                        release.properties
                        dependency-reduced-pom.xml
                        buildNumber.properties
                        """;
    Files.writeString(root.resolve(".gitignore"), content);
  }

  private void createMainClass(Path root, ProjectRequestDTO req) throws IOException {
    String pkg = req.getGroupId();
    String cls = req.getArtifactId();
    Path javaDir = root.resolve("src/main/java/" + pkg.replace(".", "/") + "/" + cls.toLowerCase());
    Path file = javaDir.resolve(cls + ".java");

    String content =
        String.format(
            """
                            package %s;

                            /**
                             * %s
                             */
                            public class %s {
                                public static void main(String[] args) {
                                    System.out.println("Hello, %s!");
                                }
                            }
                            """,
            pkg,
            req.getDescription() != null ? req.getDescription() : "Generated Maven Project",
            cls,
            cls);

    Files.writeString(file, content);
  }

  private void updatePomFile(Path root, ProjectRequestDTO req) throws IOException {
    Path pomPath = root.resolve("pom.xml");
    if (!Files.exists(pomPath)) return;

    // Read the existing pom.xml generated by the toolbox
    String content = Files.readString(pomPath);

    // Update the basic project information
    content =
        content
            .replace(
                "<groupId>com.example</groupId>", "<groupId>" + req.getGroupId() + "</groupId>")
            .replace(
                "<artifactId>new-project</artifactId>",
                "<artifactId>" + req.getArtifactId() + "</artifactId>")
            .replace(
                "<version>1.0.0-SNAPSHOT</version>", "<version>" + req.getVersion() + "</version>");

    // Add or update the name element
    String description =
        req.getDescription() != null && !req.getDescription().trim().isEmpty()
            ? req.getDescription()
            : "Generated Maven Project";

    // Add name element after version if it doesn't exist
    if (!content.contains("<name>")) {
      content =
          content.replace(
              "<version>" + req.getVersion() + "</version>",
              "<version>" + req.getVersion() + "</version>\n    <name>" + description + "</name>");
    } else {
      // Update existing name element
      content = content.replaceAll("<name>.*?</name>", "<name>" + description + "</name>");
    }

    // Add or update properties section
    if (!content.contains("<properties>")) {
      // Add properties section after packaging
      content =
          content.replace(
              "<packaging>jar</packaging>",
              "<packaging>jar</packaging>\n\n    <properties>\n        <maven.compiler.release>"
                  + req.getJavaVersion()
                  + "</maven.compiler.release>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>");
    } else {
      // Update existing maven.compiler.release
      content =
          content.replaceAll(
              "<maven\\.compiler\\.release>\\d+</maven\\.compiler\\.release>",
              "<maven.compiler.release>" + req.getJavaVersion() + "</maven.compiler.release>");
    }

    // Remove empty line after </dependencies>
    content =
        content.replace(
            "</dependencies>\n\n    </dependencyManagement>",
            "</dependencies>\n    </dependencyManagement>");

    // Remove empty line after </pluginManagement>
    content =
        content.replace("</pluginManagement>\n\n    </build>", "</pluginManagement>\n    </build>");

    // Ensure </project> is on its own line
    content = content.replace("</build></project>", "</build>\n</project>");

    // Ensure <project> is on its own line after XML declaration
    content = content.replace("?><project", "?>\n<project");

    Files.writeString(pomPath, content);
  }
}
